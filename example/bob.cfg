###############################################################################

# Example bob configuration file.
#
# Used by 'bob-config' to establish a build directory, from which a 'bob'
# command will build your project.
#
# This file should be located at the top level of a repository, below which
# are source directories.
#
# Before running bob-config, you need to:
# * Check out the project's source repository(s).
# * Ensure that all the project's external dependencies are available,
#   either in standard system locations or in local project-specific
#   locations.
# Bob does not verify external dependencies.
#
# If your project is built for a number of target architectures, use
# one config file for each architecture, and specify which one on the bob-config
# command-line.
#
###############################################################################
#
# Top-level syntax is a series of sections, each starting with a line:
# [section-name]
#
# Comment lines begin with '#'.
#
# The syntax for each section is section-specific, and described in each
# section.
#
###############################################################################


[defines]

# Define all the user-defined variables and populate all the required
# pre-defined variables.
#
# Any relative paths provided in variable definitions are relative to
# the directory this file is in, which is also the working directory
# of bob-config.
#
# A variable definition is: name = space separated list.
#
# Variables that must be defined are:
#   PROJECT  - Path to directory containing the project's top-level Bobfile.
#   REPOS    - Paths to other repos, below which are source directories that
#              are built as part of this project.
#   SYS_INC  - Non-standard paths searched for system includes.
#   SYS_LIB  - Non-standard paths searched for system libraries.
#   SYS_PATH - Non-standard paths searched for system utilities.
#   SYS_IMP  - Non-standard paths searched for D imports.
#   D_EXTERN - Top-level D packages that are external to the project.
#
# Reserved variables defined by bob from information in Bobfiles
# and used in build commands are:
#   INPUT    - Paths of the input file(s) relative to the build dir.
#   BUILT    - Paths of the resultant built file(s) relative to the build dir.
#   PROJ_IMP - Project import paths.
#   PROJ_INC - Project include paths.
#   PROJ_LIB - Project library paths.
#   LIBS     - Required libraries.
#
# ${} expands a variable, cross-multiplying it with whatever it is adjacent to.
# eg, if HEADERS = one two three, then -I${HEADERS} becomes -Ione -Itwo -Ithree.   
# If the variable is empty, the cross-multiplication is also empty.
# Variable expansion occurs just before a build command is issued.

PROJECT  = main
REPOS    =
SYS_IMP  =
SYS_INC  =
SYS_LIB  =
SYS_PATH =
D_EXTERN = std core

# Compiler switches
CCFLAGS  = -fpic -pedantic -Werror -Wall -Wno-long-long -Wundef -Wredundant-decls -DFILE_PATH=${INPUT}
C++FLAGS = ${CFLAGS} -Woverloaded-virtual -Wsign-promo -Wctor-dtor-privacy -Wnon-virtual-dtor
DFLAGS   = -w -wi

LINKFLAGS =
DLINKFLAGS =


[modes]

# For each mode, add to already-defined variables.
# Format of a mode is: the name of the mode, followed by indented
# variable additions. eg:
#
# debug
#     CCFLAGS += ggdb3
#
# Exactly one mode is in use for a given build directory, and is specified
# on the bob-config command line. eg:  mode=debug

debug
    CCFLAGS  += -O1 -ggdb3
    C++FLAGS += -O1 -ggdb3
    DFLAGS   += 

release
    CCFLAGS  += -O2 -NDEBUG
    C++FLAGS += -O2 -NDEBUG
    DFLAGS   += -O -release


[commands]

# Commands come in varieties:
#
# * Take a number of object files and produce a library.
#   These commands are of the form:
#
#   static-lib
#       Command-line(s)
#
#   dynamic-lib
#       Command-line(s)
#
#
# * Take a single input file and produce one or more output files.
#   The input base filename (extension removed) is used as the basis
#   for the built filenames. Which command is used is determined by the
#   extension of the input file. eg:
#
#   .c .o
#       Command-line(s)a - Produce a.o from a.c
#
#   .idl .h _ext.h .c
#       Command-line(s) - Produce a.h, a_ext.h and a.c from a.idl.
#   
#   .c .exe
#       Command-line(s) - Produce an executable.
#
# Notes:
#
# * The .exe extension designates an executable file, using whatever extension
#   is appropriate for the platform. On Posix, that is no extension at all.
#
# * Commands can use executables produced by the project. Other executables
#   have to be in the standard PATH or ${SYS_PATH}.


# Libraries

static-lib
    rm -f ${BUILT}
    ar csr ${BUILT} ${INPUT} 

dynamic-lib
    g++ -shared ${INPUT} ${LINKFLAGS} -L${SYS_LIB} -L${PROJ_LIB} -l{LIBS} -o\ ${BUILT}



# Generated source files (a contrived example for demonstration)

.cc .cpp
    cp ${INPUT} ${BUILT}


# Object files

.c .o
    gcc -c ${INPUT} -isystem=${SYS_INC} -iquote=${PROJ_INC} ${CFLAGS} -o\ ${BUILT}

.cpp .o
    g++ -c ${INPUT} -isystem=${SYS_INC} -iquote={$PROJ_INC} ${C++FLAGS} -o\ ${BUILT}

.d .o
    dmd -c ${INPUT} -I${SYS_IMP} -I${PROJ_IMP} ${DFLAGS} -of${BUILT}
    

# Executables

.c .exe
    gcc ${INPUT} ${LINKFLAGS} -L${SYS_LIB} -L${PROJ_LIB} -l${LIBS} -o\ ${BUILT}

.cpp .exe
    g++ ${INPUT} ${LINKFLAGS} -L${SYS_LIB} -L${PROJ_LIB} -l${LIBS} -o\ ${BUILT}

.d .exe
    dmd ${INPUT} ${DLINKFLAGS} -L-L${SYS_LIB} -L-L${PROJ_LIB} -L-l${LIBS} -of${BUILT}


