###############################################################################
# Example bub configuration file.
#
# Used by 'bub-config' to establish a build directory, from which a 'bub'
# command will build your project.
#
# This file is usually located at the top level of a repository, below which
# are source directories.
#
# Before running bub-config, you need to:
# * Check out the project's source repository(s).
# * Ensure that all the project's external dependencies are available,
#   either in standard system locations or in project-specific
#   locations.
#
# If your project is built for a number of target architectures, use
# one config file for each architecture, and specify which one on the bub-config
# command-line.
#
# The modes section of each config file caters for different types of build
# within a platform, such as debug and release modes.
#
###############################################################################
#
# Top-level syntax is a series of sections, each starting with a line:
# [section-name]
#
# Comment lines begin with '#'.
#
# The syntax for each section is section-specific, and described in each
# section.
#
###############################################################################


[defines]

# Define variables.
#
# Any relative paths provided in variable definitions are relative to
# the directory this file is in, which is also the working directory
# of bub-config.
#
# A variable definition is: name = value
#
# Where value is a series of space-separated tokens, each of which can
# contain literal text and ${variable}, where variable is the name of a
# pre-defined variable. ${variable} is expanded into the variable's contents
# by bub, cross-multiplying it with whatever it is adjacent to.
# eg, if HEADERS = one two three, then -I${HEADERS} becomes -Ione -Itwo -Ithree.
# If the variable is empty, the cross-multiplication is also empty.
# If there is no adjacent text, the variable's value is used.
# Variable expansion occurs just before a build command is issued, after
# all dependencies are known.
#
# The optional POST_CONFIGURE variable should, if present, contain paths to
# files (relative to the build directory) to copy into the build directory
# just after setting up the build directory. This can be used to put a
# data or header file in the build directory that can be accessed by low-level
# code that need project-specifiic information.
#
# The optional PRE_BUILD variable should, if present, contain the path to a script
# (relative to the build directory) to run prior to starting a build.
# This can be used to generate data or header files in the build directory
# that depend on things like repo hashes and tags.
#
# Variables required by bub are:
#
#   BUNDLES - Relative paths to files that detail where to find the source code of interest

# Also required are build commands to convert between files of different extension.
#
# Build-command variables are used by bub to create the output files specified
# in the project's Bubfile(s). They are of the form:
#     <input-ext> <output-suffix>(s) = command
# Reserved extensions with special meaning are:
#     .obj  -> object file
#     .slib -> static library
#     .dlib -> dynamic library
#     .exe  -> executable
# The extensions actually used for these vary with platform.
# Libraries and executables are built from object files.
#
# The commands that use object files to create libraries and executables are
# specified with the extension of the source files, not .obj.
# .c source files may be mixed with other types of source files,
# but others may not. .h files are assumed to be header files.
#
# Any non-variable parts of a command that match the path of an executable or script
# built file are assumed to mean that executable or script.
# An in-project tool specified in this way is automatically added as a dependency.
# This mechanism only provides a single layer of dependency, so it is recommended
# that such tools do not themselves launch other in-house tools.
#
# Reserved variables defined by bub from information in Bubfiles are:
#
#   INPUT    - Paths of the input file(s) relative to the build dir.
#   OUTPUT   - Paths of the resultant built file(s) relative to the build dir.
#   DEPS     - Path of a temporary output file that the command writes dependencies to.
#   PROJ_INC - Project include or import paths.
#   PROJ_LIB - Project library paths.
#   LIBS     - Required libraries.
#
# A DEPS file is a side effect of producing built files. Whitespace is ignored except
# as delimiters, as are any backslashes used to escape newlines. If parentheses are
# present, everything in the file is ignored except for the content of the parentheses.
#
# All build commands for object files must produce dependency information in the DEPS file.
# Other build command may do so, but this is often unnecessary because the OUTPUT files
# automatically depend on the INPUT files, and this is often sufficient for (say) code
# generation.


# Required by bub
BUNDLES      = bundle.cfg
ARCHITECTURE = Posix

# Compiler switches used in commands
COMMON     = -fpic -pedantic -Werror -Wall -Wno-long-long -Wundef -Wredundant-decls -DFILE_PATH=${INPUT}
CFLAGS     = ${COMMON}
C++FLAGS   = ${COMMON} -Woverloaded-virtual -Wsign-promo -Wctor-dtor-privacy -Wnon-virtual-dtor
DFLAGS     = -w -wi
LINKFLAGS  =
DLINKFLAGS =

### Build commands ###

# Contrived example of source-code generation using in-project tool.
.H   .h   = dist/bin/transmogrify ${INPUT} ${OUTPUT}
.CPP .cpp = dist/bin/transmogrify ${INPUT} ${OUTPUT}

# Documentation: eg intro.rst generates intro.html
.rst .html = rst2html ${INPUT} ${OUTPUT}

# Object files and determining what they depend on
.c   .obj = gcc -c -MD -MF${DEPS} ${INPUT} -iquote${PROJ_INC} ${CFLAGS}   -o ${OUTPUT}
.cpp .obj = g++ -c -MD -MF${DEPS} ${INPUT} -iquote${PROJ_INC} ${C++FLAGS} -o ${OUTPUT}
.d   .obj = dmd -c -deps=${DEPS}  ${INPUT} -I${PROJ_INC}      ${DFLAGS}   -of${OUTPUT}

# Static libraries
.c   .slib = ar csr ${OUTPUT} ${INPUT}
.cpp .slib = ar csr ${OUTPUT} ${INPUT}
.d   .slib = ar csr ${OUTPUT} ${INPUT}

# Dynamic libraries
.c   .dlib = gcc -shared ${INPUT} ${LINKFLAGS} -L${PROJ_LIB} -l${LIBS} -o ${OUTPUT}
.cpp .dlib = g++ -shared ${INPUT} ${LINKFLAGS} -L${PROJ_LIB} -l${LIBS} -o ${OUTPUT}

# Executables
.c   .exe = gcc ${INPUT} ${LINKFLAGS}  -L${PROJ_LIB}   -l${LIBS}   -o ${OUTPUT}
.cpp .exe = g++ ${INPUT} ${LINKFLAGS}  -L${PROJ_LIB}   -l${LIBS}   -o ${OUTPUT}
.d   .exe = dmd ${INPUT} ${DLINKFLAGS} -L-L${PROJ_LIB} -L-l${LIBS} -of${OUTPUT}


[modes]

# Modes are defined in two layers:
# * Fragment: A name followed by indented lines that define new variables or add to existing variables, and
# * Mode: a name that aggregates fragments, with the fragments being applied in the given order
#
# A mode may have the same name as a fragment.
# If no modes are defined, the fragments are promoted to modes of the same name.
# Fragments and modes can be defined in any order.
#
# Defining a set of modes that aggregate fragments allows conserable flexibility while
# still only allowing intended combinations to be chosen. For example:
#
# debug
#     COMMON += -O1 -ggdb3
#
# release
#     COMMON += -O2 -NDEBUG
#
# ccache
#     C++ = ccache
#
# no-ccache
#     C++ =
#
# clang
#     C++ += clang
#
# gcc
#     C++ += g++
#
# clang-debug = ccache    clang debug
# gcc-debug   = ccache    gcc   debug
# release     = no-ccache clang release
#

debug
    COMMON += -O1 -ggdb3
    DFLAGS += -g

release
    COMMON += -O2 -NDEBUG
    DFLAGS += -O  -release


[syslibCompileFlags]

# For each non-default system library used, specify the compiler flags to add if that library is
# depended on, either as literal text, or as a command to execute in the form: $(<command>).
# Such commands are executed at configure time.
# At configure time, ${BUILD_PATH} will be expanded to the absolute path to the build directory.

[syslibLinkFlags]

# For each non-default system library used, specify the link flags to add if that library is
# depended on, either as literal text, or as a command to execute in the form: $(<command>).
# Such commands are executed at configure time.
# At configure time, ${BUILD_PATH} will be expanded to the absolute path to the build directory.

dl  = -ldl
png = $(pkg-config --libs libpng)


[environment]

# The generated environment file implicitly has:
#
# * BUILD_PATH, populated with content that the shell will evaluate to the directory of the environment file.
#
# * LD_LIBRARY_PATH, populated with ${BUILD_PATH}/dist/lib.
#
# * PATH, populated with /bin, /usr/bin and ${BUILD_PATH}/dist/bin.
#
# * SYSTEM_DATA_PATH, populated with ${BUILD_PATH}/dist/data.
#
# These variables should be sufficient for most projects.
#
# In this section, specify any aditional variables and/or additional content for those variables
# that you want in the environment file.
# Variables used in this section are distinct from any other variables in this file, and variable
# expansion is done by the shell when the environment file is sourced.
#
# Existing variables will be added to, and new ones created - all with: name += values.
#
# Variable values will be applied in the reverse of the order they are added, so in the
# following example, PATH will be:
# "/usr/local/bin:${BUILD_PATH}/dist/bin:/usr/bin:/bin"
#
# For example:
#
# PATH            += /usr/local/bin
# LD_LIBRARY_PATH += /usr/local/lib
# PLUGIN_PATH     += ${BUILD_PATH}/dist/lib/plugins
