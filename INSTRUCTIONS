Identification
==============

Bottom-up-build (bub) is a build tool intended primarily to facilitate the
development of large C/C++/D projects by:
* Being easy to use.
* Enforcing rules like dependency management.
* Executing tests within the build.
* Supporting code generation.

Some relatively minor but useful additional features are:
* Building outside the source tree.
* Support for using source from multiple repositories.
* Auto-deleting redundant files from the build directory.
  This one is surprisingly useful, because you can't get false success
  from a file left over from an earlier version.

This file provides an introduction into how to use bub. Refer to the example
directory for a simple worked example.


Quick Start
===========

Build bub initially with make from this directory, and put bub and bub-config
on your path.

Set up build directories for the two examples:

bub-config --mode=release ~/builds/bub
cd example
bub-config --mode=debug ~/builds/bub-example

build with:

cd ~/builds/example
bub


The example directory contains a simple example that shows off some of
bub's features.

Bub itself serves as a trivial example, doing just the basics. It may be
a better starting point if you have a very small project.


Background
==========

Bub was developed to help tame the complexity in a large C++ project.

Bub mitigates the complexity of your project by forcing you to pay
attention to dependencies, which has the effect of breaking your design up
into well-defined packages, with dependencies flowing in one direction only.

Benefits of this include:

* The lowest-level code can be implemented and tested independently of
  the code that uses it. This opens the door to cost-effective code reuse.

* Later on, a breakage in the code you are working on is detected very early
  in the build because test code is built and run early, as it doesn't need
  to depend on high-level code.

* Well-factored designs with well-defined non-circular dependencies are way
  easier to understand and maintain than code with dependencies running wild.

More key features of bub are:

* Support generation of source code from things like IDL files.
  This is trickier than it appears, because the normal practice of scanning
  source files for includes at the start of the build doesn't work for generated
  code, which might not even exist at that time. Bub supports code generation,
  and importantly defers building a file until all of the generated source files
  it could depend on are up to date.

* Automatically determine which in-project libraries need to be linked with.
  This facilitates painless refactoring of libraries, which rapidly becomes
  untenable on a large projects if this information has to be maintained manually.
  The usual approach of having a very small number of libraries and deferring
  linking of executables till near the end of the build defeats bub's
  central purpose by having executables that depend on everything. Bub deals
  with this as follows:

  * When specifying libraries, the public and private header files of that
    library are declared.

  * An object file dependency on a public header from a library establishes
    a dependency on that library.


Preparation
===========

Bub assumes that all the source code and external libraries/utilities you will
need are already present. It is up to you to make this happen.


Configuration
=============

The bub-config utility establishes a build directory, from which bub can build
your project. bub-config requires a configuration file that defines a number of
variables - see example/bub.cfg for a fully documented example.

The configured variables ultimately specify the commands used to build files.
These commands can also write dependencies to a deps file, and this information is
used later to decide if a built file is out of date, and also to determine
what in-project libraries to link with.

The build directory you specify should be outside the source-code repositories,
avoiding pollution of your repositories with build artifacts, and allowing
multiple build directories to be using the same source. For example,
your repository might be in ~/source/myproject, and you might have build
directories ~/build/myproject/debug, ~/build/myproject/profile,
~/build/myproject/release.

A typical repository directory structure is:

repo-root
  assorted-uninteresting-files
  assorted-uninteresting-dirs
  source-root
    bub.cfg
    assorted-source-dirs

To configure a build directory from a repo that looks like the above:

cd repo-root/source-root
bub-config --mode=debug ~/build/myproject/debug


The build directory contains:

environment - Sourced to set up environment variables.
run         - Script to run a project executable.
Buboptions  - Contains variables from config file.
repos
  symlinks to the source repos
src
  symlinks to source dirs
obj
  dirs matching source dir tree
    intermediate build artifacts
tmp
  assorted temporary files
priv
  dirs matching source dir tree
    private finished build artifacts
dist
  lib  - Contains public static libraries and all dynamic libraries.
  bin  - Contains executables and scripts.
  data - Contains data files.
  src  - contains public source files from public static libraries.


Building
========

Introduction
------------

Bub is the build tool. It always builds the whole project, so there is no build
target to specify on the command-line. This isn't a problem because:
* Bub determines what needs to be done quickly.
* Bub's log output is very clean.
* Bub builds files (mostly) in definition order, and stops the build when an error
  occurs, so you quickly get back to the point of failure during development.
* Bub runs and evaluates unit tests (mostly) in definition order, so if you have
  unit tests, you quickly get to the point of failure during debugging.

The "mostly" above refers to the jitter in build order that occurs when building
with multiple cores.

The build process is controlled by Bubfiles. The top-level Bubfile is generated,
and has a "contain" rule that brings in all the top level packages specified in
the config file.

Refer to the example's Bubfiles.

Bubfile syntax is:

# This line is a comment.
<statement-type> <param0> [: <param1> [: param2 [: param3]]];

where a parameter is a space-separated list of tokens.


Conditional Bubfile content
~~~~~~~~~~~~~~~~~~~~~~~~~~~

A Bubfile can contain configuration-dependent parts via the ARCHITECTURE
variable defined in the configuration file, like so:

[value] ( content )

Where whitespace is not significant, and only whitespace can appear between ']' and '(',
and ')' can only be used to terminate a bracketed section.
The bracketed text is ignored unless ARCHITECTURE contains the specified value. For example, if

bub.cfg contains:
  ARCHITECTURE = Posix

and a Bubfile contains:
  static-lib foo :
                   header1.h header2.h
                 :
                   body1.cc
                   [Posix] ( posix_body2.cc )
                   [Linux] ( linux_extras_body2.cc )
                 ;

  [Linux] (
      translate linux_docco.rst;
  )

then the Posix part is present, but the Linux parts are not.

Conditionals cannot be nested.


Statement types
---------------

Statement types are:


Contain
~~~~~~~

contain subdir-names [: protected];

eg: contain math net stream tools;

Specifies that the listed subdirectories contain Bubfiles and are included in
the build. Visibility defaults to public. Contained directories must be
specified in dependency order (lowest level first).


Static Lib
~~~~~~~~~~

static-lib lib-name : public-source : protected-source [: required-sys-libs];
public-lib lib-name : public-source : protected-source [: required-sys-libs];

eg: static-lib math : matrix.h alg.h : matrix.cpp alg.cpp : m;

Specifies a static library. All the source files should be in the same language,
or in a language from which the library's language files can be generated.
Exceptions:
* .c files can mix with others.
* Files without configured build commands (eg header files) can mix with others.

The order of the listed files should be in dependency order, but that is only
required if some of the library's source files are generated within the library.

A static lib has to contain at least one object file generated from the listed
source files.

Specifying a required-syslib has two effects:

* This library's object file build commands will have the syslib's compile flags
  that were specified in the configuration file.

* The link commands for anything that depends on this library will contain the
  syslib's link flags that were specified in the configuration file.

sys-libs should be listed in dependency order (lowest level first).

The public files are those that client code can import/include.

public-lib is identical to static-lib except that:

* The public source files are copied into dist/src/<trail>

* If the library is not contained in a dynamic library, the library file is
  copied into dist/lib.


Dynamic Lib
~~~~~~~~~~~

dynamic-lib name : static-libs [: dir];

eg: dynamic-lib tools : tools;

Dynamic libs contain all the object files contained in the specified static libs.
Executables defined after a dynamic library will link to the dynamic library
rather than static libraries contained by the dynamic-lib.

The order of the specified static libs is unimportant.

The contained static-libs all have to be declared in the current Bubfile
or in a transitively contained directory's Bubfile.
The last path element can optionally be omitted if it is the same as the
containing directory name, which is often the case.

For example, if the directory structure is:
  one - defines dynamic library "one"
    two - defines static library "two"
    three - defines static library "three"
then the statement in one's Bubfile to generate the dynamic library is:

dynamic-lib one : two three;

or, if you want to do it in full, which you must if the names don't match:

dynamic-lib one : two/two three/three;

Note that a directory can contain any number of static and dynamic libraries.

Dynamic libraries are located in dist/lib by default. if an optional <dir> is
provided, the dynamic library is located in dist/<dir> instead.
For example:

dynamic-lib my-plugin : part-one part-two : lib/plugins;


Executable
~~~~~~~~~~

dist-exe exe-name : source [: required-sys-libs];
test-exe exe-name : source [: required-sys-libs];
priv-exe exe-name : source [: required-sys-libs];

eg: test-exe math-test : math_test.cpp;

See static-lib for the meaning of required-syslibs.

dist-exe places the built executable in the dist/bin directory.

priv-exe places the build executable in the priv/<trail> directory.

test-exe places the built executable in the priv/<trail> directory,
and executes the test when its result file is out of date.

The test is run with a command-line argument --tmp=<path>, where
<path> is a temporary directory that the test can use for scratch files
if necessary. The temporary directory is deleted if the test passes.


Scripts, data and docs
~~~~~~~~~~~~~~~~~~~~~~

translate names [: dist-destination-path];

Copies or (if there is a rule to translate files from the extension)
produces files that do not contribute to libraries or executables.
If any of names is a directory, it is recursed into.

For example:

# copy/translate specified files into dist/bin
translate foo.sh foo2.sh : bin;

# copy/build index.rst into priv/<chain> and files in doc dir and below
# into priv/<chain>/doc, preserving any subdirectory structure.
translate index.rst doc;

Source files can be generated this way too, but they are usually generated
by adding the file that will be translated into the source file to a
static-lib statement.


Generated files
~~~~~~~~~~~~~~~

generate target : command-line : inputs [: destination-path];

In cases where translate isn't flexible enough, or can't be used because
it does the same job on all files of a given extension, the generate statement
can be used to generate a file.

The command-line must place the named target in <destination-path> if one is
provided. Otherwise, it must place it in priv/<chain>.

If a named input has already been put into the build directory (e.g. via translate),
that file is depended on rather than another of the same name in the source tree.

The targets depend on the given inputs and the command utility if it is known,
and also on the files listed in the ${DEPS} file produced by the command's
previous invocation, if any.

The same command-line expansions used in configured commands apply here.

Some examples:

generate foo.validated :
         validate-config --config=${INPUT} --deps=${DEPS} --result=${OUTPUT} :
         foo.cfg;

generate foo.data : generate-data --output=${OUTPUT} : : data;

Don't use this statement to generate source files - configure a command
to do so and add the input files to a static-lib.


Dependencies
============

Discussion
----------

Dependencies are a major preoccupation of bub. This is because on large
projects, management of dependencies is essential, and the best way to manage
something is with a tool. If you can't build software that breaks the rules,
you can't sneak an invalid dependency in while no-one is looking.


Rules
-----

Dependencies are deduced from information in generated dependency files by
using ${DEPS} in commands, and also from containment/dependency information
in Bubfiles.

File A is allowed to depend on file B if all of the following are true:

* A is defined later than B.

* A's package is not a descendant of B's package (both in the same package is ok).

* B is visible.


Visibility works like this:

* The protected source files in a static lib can only be depended on by that
  static lib's object files.

* All of the source files in an exe can only be depended on by that exe's
  object files.

* Packages can be public or protected. Files that are descendants of
  protected package A are only visible to files that are descendants of
  A's parent package.


An object file can only be used once - either in a library or an executable.
Dynamic libraries don't count as a use - they are just a repackaging.

A dynamic library cannot contain the same static library as another dynamic library.

All static libraries referred to by the static libraries in a dynamic library
must also be packaged in dynamic libraries.

All static libraries referred to by public static libraries must also be public.
